#include <SPI.h>//includiing spi libreary for can module
#include <mcp2515_twoModules.h>// including can libreary
#define MCP2515_CS 53 // defing the can master pin 

struct can_frame canMsg1; // defing the structure variable name message in a structure 

MCP2515 mcp2515(MCP2515_CS); // Initialize MCP2515 1 on cs 53

void setup() {
  // put your setup code here, to run once:
  
  pinMode(13, OUTPUT);
// Initialize the first SPI interface for MCP2515 1

  while (!Serial);
  Serial.begin(115200);
  //Serial3.begin(115200);

   canMsg1.can_id ;
    canMsg1.can_dlc;

  mcp2515.reset();
  mcp2515.setBitrate(CAN_500KBPS, MCP_8MHZ);
  mcp2515.setNormalMode();
  delay(1000);
  Serial.println("Write to CAN");


}

void loop() {
  // put your main code here, to run repeatedly:
  char canid[4];
  char ee[5];
   if (Serial.available() > 0) { // check if there is data available on the Serial port
     String myString = Serial.readString();
       String s2 = myString.substring(1, 9);
      String  s1 = myString.substring(0, 2);
      //checking code here for data length 
      /*String input = Serial.readString();
      input.toCharArray(ee, 5);
      //Serial.println("DDD"+char(ee));
      if(ee == 8)
      {
       // value.getBytes(ee, 3);
        //Serial.println("DDD"+char(ee));
        canMsg1.can_dlc=ee[0];
      }*/

        //canMsg1.can_id= strtoul(myString.substring(0, 2).c_str(), NULL, 10);
          s2.getBytes(canMsg1.data, 9);
          s1.getBytes(canid, 3);
          canMsg1.can_id =canid[0];
     //s1.getBytes(canMsg1.data, 2);
       
    //Serial.println(s1);
    int dataLength = s2.length();
     canMsg1.can_dlc=dataLength;
     Serial.println("data length");
     Serial.println(canMsg1.can_dlc);
     Serial.println("can id");
     Serial.println(canMsg1.can_id);

   digitalWrite(13, HIGH);
  // send the message here
    mcp2515.sendMessage(&canMsg1);
    delay(4000);
    Serial.println("Messages sent");
   //redaing messaga here




   }
   }
   
   
   
   
   
   
   
   
   ///////////////////////////////////////////////////////////////////////////////////////////////////////
   //python script
   import serial
import time
import openpyxl

serCom = serial.Serial("COM3", 115200)
serCom.timeout = 1
#work book
#Open the Excel file and select the sheet you want to read from
workbook = openpyxl.load_workbook('Book3.xlsx')
sheet = workbook['Sheet1'] # Change 'Sheet1' to the name of your sheet
#Extract the first row and column values

cell_list = [(1, 1),(1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8),(1, 9),(1, 10)]
row_value = ""
for row, col in cell_list:
    cell_value = sheet.cell(row=row, column=col).value
    if cell_value is not None:
        row_value += str(cell_value)
print("for loop value")
print(row_value)

#row_value = sheet.cell(row1=1, column1=1,row2=1, column2=2,row3=1, column3=3,row4=1, column4=4,row=5, column5=5,row=6, column6=6,row=7, column7=7,row=8, column8=8).value
#col_value = sheet.cell(row=2, column=2).value
#Combine the row and column values into a single string
data_to_send = f"{row_value}\n"
print(data_to_send)
###trying to get dlc from here
cell_value2=sheet.cell(row=1,column=2).value
print("cell 2 value")
print(cell_value2)
###endded here
while 1:
 for hex in data_to_send:
  
  #dec = int(hexDec, 16)
  #print(dec)
  #hexVal = hex(dec)
  ascii=bytes.fromhex(data_to_send).decode()
  #print(ascii[0])
  #print(ascii[1])
  time.sleep(0.9)
  serCom.timeout = 1
  #print(ascii)
  serCom.write(ascii.encode())
  serCom.write(bytes([cell_value2]))#etc from excel dlt
  #serCom.write(cell_value2)
#while 1:
  print(serCom.readline().decode())
  
   
