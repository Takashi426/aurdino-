#include <SPI.h>
#include <mcp2515_twoModules.h>
#define MCP2515_CS 53
struct can_frame canMsg1;
struct can_frame canMsg2;
struct can_frame canMsg3;
struct can_frame canMsg4;
struct can_frame canMsg5;

MCP2515 mcp2515(MCP2515_CS);


void setup() {
  canMsg1.can_id  = 0x551;
  canMsg1.can_dlc = 8;
  canMsg1.data[0] = 0x1C;
  canMsg1.data[1] = 0x02;
  canMsg1.data[2] = 0x58;
  canMsg1.data[3] = 0x02;
  canMsg1.data[4] = 0x1A;
  canMsg1.data[5] = 0x04;
  canMsg1.data[6] = 0x00;
  canMsg1.data[7] = 0x00;

  canMsg2.can_id  = 0x555;
  canMsg2.can_dlc = 8;
  canMsg2.data[0] = 0x5D;
  canMsg2.data[1] = 0x00;
  canMsg2.data[2] = 0x5C;
  canMsg2.data[3] = 0x00;
  canMsg2.data[4] = 0x00;
  canMsg2.data[5] = 0x00;
  canMsg2.data[6] = 0x00;
  canMsg2.data[7] = 0x00;


  canMsg3.can_id  = 0x556;
  canMsg3.can_dlc = 8;
  canMsg3.data[0] = 0xCE;
  canMsg3.data[1] = 0x13;
  canMsg3.data[2] = 0x8F;
  canMsg3.data[3] = 0xFE;
  canMsg3.data[4] = 0x5E;
  canMsg3.data[5] = 0x01;
  canMsg3.data[6] = 0x00;
  canMsg3.data[7] = 0x00;

  
  canMsg4.can_id  = 0x559;
  canMsg4.can_dlc = 8;
  canMsg4.data[0] = 0x00;
  canMsg4.data[1] = 0x00;
  canMsg4.data[2] = 0x00;
  canMsg4.data[3] = 0x00;
  canMsg4.data[4] = 0x01;
  canMsg4.data[5] = 0x50;
  canMsg4.data[6] = 0x4E;
  canMsg4.data[7] = 0x00;


  canMsg5.can_id  = 0x55C;
  canMsg5.can_dlc = 8;
  canMsg5.data[0] = 0xC0;
  canMsg5.data[1] = 0x00;
  canMsg5.data[2] = 0x00;
  canMsg5.data[3] = 0x00;
  canMsg5.data[4] = 0x00;
  canMsg5.data[5] = 0x00;
  canMsg5.data[6] = 0x00;
  canMsg5.data[7] = 0x00;

  
  while (!Serial);
  Serial.begin(115200);
  
  mcp2515.reset();
  mcp2515.setBitrate(CAN_500KBPS, MCP_8MHZ);
  mcp2515.setNormalMode();
  
  Serial.println("Write to CAN");
}

void loop() {
  mcp2515.sendMessage(&canMsg1);
    delay(100);

  mcp2515.sendMessage(&canMsg2);
    delay(100);

  mcp2515.sendMessage(&canMsg3);
    delay(100);

  mcp2515.sendMessage(&canMsg4);
    delay(100);

  mcp2515.sendMessage(&canMsg5);

  Serial.println("Messages sent");
  
  delay(100);
}
