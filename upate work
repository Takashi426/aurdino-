#include <SPI.h>//includiing spi libreary for can module
#include <mcp2515_twoModules.h>// including can libreary
#define MCP2515_CS 53 // defing the can master pin 
struct can_frame canMsg1; // defing the structure variable name message in a structure 

MCP2515 mcp2515(MCP2515_CS); // Initialize MCP2515 1 on cs 53

void setup() {
  // put your setup code here, to run once:
  
  pinMode(13, OUTPUT);
// Initialize the first SPI interface for MCP2515 1

  while (!Serial);
  Serial.begin(115200);
  //Serial3.begin(115200);

   canMsg1.can_id;
    canMsg1.can_dlc = 8;

  mcp2515.reset();
  mcp2515.setBitrate(CAN_500KBPS, MCP_8MHZ);
  mcp2515.setNormalMode();
  delay(1000);
  Serial.println("Write to CAN");


}

void loop() {
  // put your main code here, to run repeatedly:
   if (Serial.available() > 0) { // check if there is data available on the Serial port
     String myString = Serial.readStringUntil('\n');
         char s2[3] = myString.substring(0, 2);
         
        /* for (int i = 0; i < strlen(s2); i++) {
    canMsg1.can_id = (canMsg1.can_id * 10) + (s2[i] - '0'); // Convert ASCII characters to integer values and concatenate them
  }*/
         //uint32_t can_id = S2.toInt();
           Serial.println(s1);
          canMsg1.can_id=s1;
     // s2.readBytes(canMsg1.can_id,1);
       Serial.println(canMsg1.can_id);
//canMsg1.can_id=s2;
myString.getBytes(canMsg1.data, 9);


    //unsigned long hexValue = Serial.parseHexString(hexString1);
   // String hexString2 = Serial.readStringUntil('\n'); // read the second hex value as a String until a newline character is received
    //long hexValue = strtol(hexString1.c_str(), NULL, 16); // convert the first hex String to a long integer
   // long hexValue2 = strtol(hexString2.c_str(), NULL, 16); // convert the second hex String to a long integer
    //Serial.print("Hex value : ");
    //Serial.println(hexValue,HEX); // print the first hex value back out over Serial
    //Serial.print("Hex value 2: ");
    //Serial.println(hexValue2, HEX); // print the second hex value back out over Serial
    //canMsg1.data[0]=hexValue;
    //canMsg1.data[1]=hexValue2;
     digitalWrite(13, HIGH);
  // send the message here
    mcp2515.sendMessage(&canMsg1);
    delay(4000);
    Serial.println("Messages sent");
   //redaing messaga here




   }
   }
MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
//new update #include <SPI.h>//includiing spi libreary for can module
#include <mcp2515_twoModules.h>// including can libreary
#define MCP2515_CS 53 // defing the can master pin 
struct can_frame canMsg1; // defing the structure variable name message in a structure 

MCP2515 mcp2515(MCP2515_CS); // Initialize MCP2515 1 on cs 53

void setup() {
  // put your setup code here, to run once:
  
  pinMode(13, OUTPUT);
// Initialize the first SPI interface for MCP2515 1

  while (!Serial);
  Serial.begin(115200);
  //Serial3.begin(115200);

   canMsg1.can_id;
    canMsg1.can_dlc = 8;

  mcp2515.reset();
  mcp2515.setBitrate(CAN_500KBPS, MCP_8MHZ);
  mcp2515.setNormalMode();
  delay(1000);
  Serial.println("Write to CAN");


}

void loop() {
  // put your main code here, to run repeatedly:
   if (Serial.available() > 0) { // check if there is data available on the Serial port
     String myString = Serial.readStringUntil('\n');
             String s1 = myString.substring(0, 1);
         String s2 = myString.substring(1, 9);
         int dataLength = s2.length();
canMsg1.can_dlc=dataLength;
Serial.println("data length");
Serial.println(dataLength);
   canMsg1.can_id = strtoul(s1.c_str(), NULL, 10); 

         
        /* for (int i = 0; i < strlen(s2); i++) {
    canMsg1.can_id = (canMsg1.can_id * 10) + (s2[i] - '0'); // Convert ASCII characters to integer values and concatenate them
  }*/
         //uint32_t can_id = S2.toInt();
           //Serial.println(s1);
           sprintf(canMsg1.can_id, "%02X", s1);
           
          //canMsg1.can_id=myInt;
     // s2.readBytes(canMsg1.can_id,1);
       Serial.println(canMsg1.can_id);

myString.getBytes(canMsg1.data, 9);


    //unsigned long hexValue = Serial.parseHexString(hexString1);
   // String hexString2 = Serial.readStringUntil('\n'); // read the second hex value as a String until a newline character is received
    //long hexValue = strtol(hexString1.c_str(), NULL, 16); // convert the first hex String to a long integer
   // long hexValue2 = strtol(hexString2.c_str(), NULL, 16); // convert the second hex String to a long integer
    //Serial.print("Hex value : ");
    //Serial.println(hexValue,HEX); // print the first hex value back out over Serial
    //Serial.print("Hex value 2: ");
    //Serial.println(hexValue2, HEX); // print the second hex value back out over Serial
    //canMsg1.data[0]=hexValue;
    //canMsg1.data[1]=hexValue2;
     digitalWrite(13, HIGH);
  // send the message here
    mcp2515.sendMessage(&canMsg1);
    delay(4000);
    Serial.println("Messages sent");
   //redaing messaga here




   }
   }
   ??????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????
   """"""""""""""""""""""""""""""""""""""""""""""""""""""""""
   #include <SPI.h>//includiing spi libreary for can module
#include <mcp2515_twoModules.h>// including can libreary
#define MCP2515_CS 53 // defing the can master pin 
struct can_frame canMsg1; // defing the structure variable name message in a structure 
struct can_frame canMsg2;
struct can_frame canMsg3;

MCP2515 mcp2515(MCP2515_CS); // Initialize MCP2515 1 on cs 53

void setup() {
  canMsg1.can_id;
  canMsg1.can_dlc;
  canMsg2.can_id;
  canMsg2.can_dlc;
  canMsg3.can_id;
  canMsg3.can_dlc;

  while (!Serial);
  Serial.begin(115200);
  mcp2515.reset();
  mcp2515.setBitrate(CAN_500KBPS, MCP_8MHZ);
  mcp2515.setNormalMode();
  delay(100);

  
  Serial.println("Write to CAN");
}

void loop() {
  
  char canid1[4];
  char canid2[4];
  char canid3[4];

  
   if (Serial.available() > 0) { // check if there is data available on the Serial port
      String myString = Serial.readString();
     //for (int i = 0; i <= 1; i++)
      //{
      String  s1 = myString.substring(0, 2);
      s1.getBytes(canid1, 3);
      canMsg1.can_id =canid1[0];


      String  s2 = myString.substring(0, 2);
      s2.getBytes(canid2, 3);
      canMsg2.can_id =canid2[0];


      String  s3 = myString.substring(0, 2);
      s3.getBytes(canid3, 3);
      canMsg3.can_id =canid3[0];
   
      for (int i = 0; i <= 1; i++)
       {
     if(canMsg1.can_id==18)
         {
           String l1 = myString.substring(1, 9);
            l1.getBytes(canMsg1.data, 9);
            Serial.println(canid1[0]);
            int dataLength1 = l1.length();
            canMsg1.can_dlc=dataLength1;
    
    
           Serial.println("data length_1");
           Serial.println(canMsg1.can_dlc);
           Serial.println("can id_1");
           Serial.println(canMsg1.can_id);

               mcp2515.sendMessage(&canMsg1);
              // delay(4000);
               Serial.println("Messages sent_1");
               break;                
        }


      if(canMsg2.can_id==19)
         {
           String l2 = myString.substring(1, 9);
            l2.getBytes(canMsg2.data, 9);
            Serial.println(canid2[0]);
            int dataLength2 = l2.length();
            canMsg2.can_dlc=dataLength2;
             s2.getBytes(canid2, 3);

    
           Serial.println("data length_2");
           Serial.println(canMsg2.can_dlc);
           Serial.println("can id_2");
           Serial.println(canMsg2.can_id);
                //delay(400);
                
                mcp2515.sendMessage(&canMsg2);
                Serial.println("Messages sent_2");
                break;
        }
       


      if(canMsg3.can_id==20)
         {
           String l3 = myString.substring(1, 9);
            l3.getBytes(canMsg3.data, 9);
            Serial.println(canid3[0]);
            int dataLength3 = l3.length();
            canMsg3.can_dlc=dataLength3;
              s3.getBytes(canid3, 3);


    
           Serial.println("data length_3");
           Serial.println(canMsg3.can_dlc);
           Serial.println("can id_3");
           Serial.println(canMsg3.can_id);
                mcp2515.sendMessage(&canMsg3);
                Serial.println("Messages sent_3");
                break;                                  
        }
       }
       
       
  
      
        
     
          
          
          /*s1.getBytes(canid1, 3);
         // canMsg1.can_id =canid1[0];
          Serial.println(canid1[0]);
          int dataLength = s2.length();
          canMsg1.can_dlc=dataLength;
    
    
     Serial.println("data length");
     Serial.println(canMsg1.can_dlc);
     Serial.println("can id");
     Serial.println(canMsg1.can_id);*/

   
  // send the message here
  /*
    mcp2515.sendMessage(&canMsg1);
   // delay(4000);
    Serial.println("Messages sent_1");
    mcp2515.sendMessage(&canMsg2);
    //delay(400);
    Serial.println("Messages sent_2");
    mcp2515.sendMessage(&canMsg3);
    //delay(400);
    Serial.println("Messages sent_3");
     //delay(4000);*/
       }
       //azezur
 }
